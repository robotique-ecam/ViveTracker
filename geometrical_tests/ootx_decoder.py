import sys

sys.path.append("../")


from ootx_data import ootx_data  # this is the array from data_tests/ootx_shaped
from bmc_decoder.bmc_decoder import SingleWord
from polynomials.polynomial_finder import PolynomialIdentifier
from timestamp_computing import TimestampComputing
from lfsr.lfsr import LFSR

ts_computing = TimestampComputing()
ootx = ""

for words in ootx_data:

    diff_ts = ts_computing.get_ts_diff(words[0][1], words[1][1])

    first_word = SingleWord(waveform=[], start_timestamp=0, data=words[0][0])
    second_word = SingleWord(waveform=[], start_timestamp=diff_ts, data=words[1][0])

    identifier = PolynomialIdentifier(first_word, second_word, first_two_polys=True)
    resulting_polys = identifier.search_polynomial()

    if hasattr(resulting_polys[0], "polynomial"):
        poly = resulting_polys[0].polynomial

        if poly == 0x1D258:
            ootx += "0"
        elif poly == 0x17E04:
            ootx += "1"
    else:
        print(hex(words[0][1]))
        print(diff_ts)
        ootx += " "

print(ootx)

"""

"""
